<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>SpringMasterDetail</groupId>
	<artifactId>SpringMasterDetail</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>war</packaging>
	<name>Spring Master-Detail Project</name>
	<description>Showing Spring Boot with Thymeleaf and JQuery UI</description>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>1.3.3.RELEASE</version>
	</parent>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<java.version>1.8</java.version>
		<com.mysema.querydsl.version>3.7.2</com.mysema.querydsl.version>
	</properties>

	<dependencies>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>

		<!-- Dependency spring-boot-starter-web automatically configures Spring 
			MVC -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>runtime</scope>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- We need QueryDSL so that our repository can filter as well as page 
			and sort. -->
		<!-- http://mvnrepository.com/artifact/com.mysema.querydsl/querydsl-jpa -->
		<!-- The following by itself is not sufficient, since we need to get Maven 
			to create -->
		<!-- the query types on compilation. These query types are based on our 
			own domain -->
		<!-- classes such as @Entity classes. To do this we need to add the Maven 
			APT plugin. -->
		<!-- See below in the plugins section. . . . -->
		<!-- See also here http://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-five-querydsl/ -->
		<!-- and here https://arthurportas.wordpress.com/2016/03/13/sample-spring-data-jpa-query-with-querydsl/ -->
		<dependency>
			<groupId>com.mysema.querydsl</groupId>
			<artifactId>querydsl-apt</artifactId>
			<version>${com.mysema.querydsl.version}</version>
		</dependency>
		<dependency>
			<groupId>com.mysema.querydsl</groupId>
			<artifactId>querydsl-jpa</artifactId>
			<version>${com.mysema.querydsl.version}</version>
		</dependency>

		<!--WebJars -->
		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>bootstrap</artifactId>
			<version>3.3.4</version>
		</dependency>
		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>jquery</artifactId>
			<version>2.2.3</version>
		</dependency>
		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>jquery-ui</artifactId>
			<version>1.11.4</version>
		</dependency>

		<!-- JQuery datatables, so we can easily create better tables, see https://datatables.net/ -->
		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>datatables</artifactId>
			<version>1.10.11</version>
		</dependency>

	</dependencies>

	<!-- Now for the build plugins. -->
	<!-- The Spring Boot Maven plugin a) collects all the jars -->
	<!-- on the classpath into a single, easily transportable jar; -->
	<!-- b) searches for public static void main() to run; -->
	<!-- c) provides a built-in dependency resolver that sets the -->
	<!-- version numbers to match Spring BOot dependencies, which you -->
	<!-- can override if you wish. -->
	<!-- For build configuration I also used: -->
	<!-- 1) the apt-maven-plugin to generate the QueryDSL sources -->
	<!-- 2) build-helper-maven-plugin to add the (generated) source directory 
		to the build -->
	<!-- 3) some boilerplate plugin management to get around an m2e problem 
		in plugins such as (2). -->
	<!-- Specifically, you'll get an error in your POM along the lines of -->
	<!-- "plugin execution not covered by lifecycle configuration". -->
	<!-- To sort this out in similar situations: -->
	<!-- a) put your cursor just above the end-build tag (i.e. where you want -->
	<!-- your plugin management to go) -->
	<!-- b) click on the error -->
	<!-- c) Ctrl-1 for "quick fix" -->
	<!-- d) choose "Permanently mark goal run in pom.xml as ignored in Eclipse 
		build" -->
	<!-- e) wait for the boilerplate to be generated -->
	<!-- f) replace the ignore tag with execute tag g) consider adding runOnIncremental 
		tag inside the execute tag, with the following contents: false|true This 
		allegedly causes eclipse call this maven plugin on incremental builds -->
	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>

			<!-- HEre we are configuring a JPAAnnotationProcessor, so that on compilation 
				it will generate -->
			<!-- QueryDSL query types to the target/generated-sources/apt directory 
				in our project. -->
			<!-- For example, if we have an entity called Employee, a QEmployee class 
				will be created. -->
			<!-- NOTE: thanks to an Eclipse issue you will now see an error in your 
				POM. You have -->
			<!-- to modify the eclipse.ini file. See this project's readme file for 
				more details. -->
			<plugin>
				<groupId>com.mysema.maven</groupId>
				<artifactId>apt-maven-plugin</artifactId>
				<version>1.1.3</version>
				<executions>
					<execution>
						<goals>
							<goal>process</goal>
						</goals>
						<configuration>
							<outputDirectory>target/generated-sources/apt</outputDirectory>
							<processor>com.mysema.query.apt.jpa.JPAAnnotationProcessor</processor>
						</configuration>
					</execution>
				</executions>
				<dependencies>
					<dependency>
						<groupId>com.mysema.querydsl</groupId>
						<artifactId>querydsl-apt</artifactId>
						<version>${com.mysema.querydsl.version}</version>
					</dependency>
				</dependencies>
			</plugin>

			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<executions>
					<execution>
						<phase>generate-sources</phase>
						<goals>
							<goal>add-source</goal>
						</goals>
						<configuration>
							<sources>
								<source>target/generated-sources/apt</source>
								<source>target/generated-sources/annotations/</source>
							</sources>
						</configuration>
					</execution>

				</executions>
			</plugin>
		</plugins>

		<pluginManagement>
			<plugins>
				<!--This plugin's configuration is used to store Eclipse m2e settings 
					only. It has no influence on the Maven build itself. -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.codehaus.mojo
										</groupId>
										<artifactId>
											build-helper-maven-plugin
										</artifactId>
										<versionRange>
											[1.9.1,)
										</versionRange>
										<goals>
											<goal>add-source</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<execute>
										</execute>

									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

</project>